[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[project]
name = "gradient-free-optimizers"
version = "1.7.1"
description = "Simple and reliable optimization with local, global, population-based and sequential techniques in numerical discrete search spaces."
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
keywords = ["visualization", "data-science"]
authors = [
  {name = "Simon Blanke", email = "simon.blanke@yahoo.com" }
]
maintainers = [
  {name = "Simon Blanke", email = "simon.blanke@yahoo.com" }
]
classifiers=[
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
]

dependencies = [
  "scipy <2.0.0",
  "numpy >=1.18.1, <3.0.0",
  "pandas <3.0.0",
  "scikit-learn >=0.21, !=0.23.*",
  "tqdm >=4.48.0, <5.0.0",
]

[project.optional-dependencies]
build = [
  "setuptools",
  "build",
  "wheel",
]
test = [
  "pytest == 8.4.2",
  "flake8",
  "pytest-cov",
  "surfaces",
]

[project.urls]
"Homepage" = "https://github.com/SimonBlanke/Gradient-Free-Optimizers"
"Bug Reports" = "https://github.com/SimonBlanke/Gradient-Free-Optimizers/issues"
"Source" = "https://github.com/SimonBlanke/Gradient-Free-Optimizers/"

[tool.ruff]
line-length = 88
exclude = [".git", "examples/*"]
target-version = "py39"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
  # https://pypi.org/project/pycodestyle
  "D",
  "E",
  "W",
  # https://pypi.org/project/pyflakes
  "F",
  # https://pypi.org/project/flake8-bandit
  "S",
  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "UP",
  "I002",    # Missing required imports
  "UP008",   # Super calls with redundant arguments passed.
  "G010",    # Deprecated log warn.
  "PLR1722", # Use sys.exit() instead of exit() and quit().
  "PT014",   # pytest-duplicate-parametrize-test-cases.
  "PT006",   # Checks for the type of parameter names passed to pytest.mark.parametrize.
  "PT007",   # Checks for the type of parameter values passed to pytest.mark.parametrize.
  "PT018",   # Checks for assertions that combine multiple independent condition
  "RUF001", # Checks for non unicode string literals
  "RUF002", # Checks for non unicode string literals
  "RUF003", # Checks for non unicode string literals
]
extend-select = [
  "I", # isort
  "C4", # https://pypi.org/project/flake8-comprehensions
]
ignore=[
  "E203", # Whitespace-before-punctuation.
  "E402", # Module-import-not-at-top-of-file.
  "E731", # Do not assign a lambda expression, use a def.
  "RET504", # Unnecessary variable assignment before `return` statement.
  "S101", # Use of `assert` detected.
  "RUF100", # https://docs.astral.sh/ruff/rules/unused-noqa/
  "C408", # Unnecessary dict call - rewrite as a literal.
  "UP031", # Use format specifier instead of %
  "S102", # Use of excec
  "C414", # Unnecessary `list` call within `sorted()`
  "S301", # pickle and modules that wrap it can be unsafe
  "C416", # Unnecessary list comprehension - rewrite as a generator
  "S310", # Audit URL open for permitted schemes
  "S202", # Uses of `tarfile.extractall()`
  "S307", # Use of possibly insecure function
  "C417", # Unnecessary `map` usage (rewrite using a generator expression)
  "S605", # Starting a process with a shell, possible injection detected
  "E741", # Ambiguous variable name
  "S107", # Possible hardcoded password
  "S105", # Possible hardcoded password
  "PT018", # Checks for assertions that combine multiple independent condition
  "S602", # sub process call with shell=True unsafe
  "C419", # Unnecessary list comprehension, some are flagged yet are not
  "C409", # Unnecessary `list` literal passed to `tuple()` (rewrite as a `tuple` literal)
  "S113", # Probable use of httpx call without timeout
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
